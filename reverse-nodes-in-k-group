# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        dummy = ListNode(0)
        dummy.next = head
        prev_group = dummy

        while True:
            # 1️⃣ Check if there are k nodes left
            kth = prev_group
            for _ in range(k):
                kth = kth.next
                if not kth:
                    return dummy.next  # Less than k nodes left, done

            group_next = kth.next

            # 2️⃣ Reverse this k-group
            prev, curr = kth.next, prev_group.next
            for _ in range(k):
                temp = curr.next
                curr.next = prev
                prev = curr
                curr = temp

            # 3️⃣ Connect previous group to the reversed group
            temp = prev_group.next  # Will become the tail of this reversed group
            prev_group.next = prev
            prev_group = temp
