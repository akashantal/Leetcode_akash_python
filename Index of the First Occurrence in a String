class Solution(object):
    def strStr(self, haystack, needle):
        """
        :type haystack: str
        :type needle: str
        :rtype: int
        """
        # if not needle:
        #     return 0
        # n, m = len(haystack), len(needle)

        # for i in range(n-m+1):
        #     if haystack[i:i+m] == needle:
        #         return i
        # return -1

        lps = [0] * len(needle)
        length = 0  # length of the previous longest prefix suffix
        i = 1

        while i < len(needle):
            if needle[i] == needle[length]:
                length += 1
                lps[i] = length
                i += 1
            else:
                if length != 0:
                    length = lps[length - 1]
                else:
                    lps[i] = 0
                    i += 1

        # Step 2: Use LPS to search in haystack
        i = j = 0  # i -> haystack index, j -> needle index
        while i < len(haystack):
            if haystack[i] == needle[j]:
                i += 1
                j += 1

            if j == len(needle):  # full match found
                return i - j

            elif i < len(haystack) and haystack[i] != needle[j]:
                if j != 0:
                    j = lps[j - 1]
                else:
                    i += 1

        return -1
